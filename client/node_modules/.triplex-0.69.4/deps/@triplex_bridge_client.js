import "./chunk-G3PMV62Z.js";

// ../../../../../../../Applications/Triplex.app/Contents/Resources/app/node_modules/@triplex/bridge/dist/compose.js
function compose(o) {
  return () => {
    o.forEach((o2) => o2());
  };
}

// ../../../../../../../Applications/Triplex.app/Contents/Resources/app/node_modules/@triplex/bridge/dist/client.js
function forwardKeydownEvents() {
  document.addEventListener("keydown", (e2) => {
    send("keydown", { altKey: e2.altKey, code: e2.code, ctrlKey: e2.ctrlKey, isComposing: e2.isComposing, key: e2.key, keyCode: e2.keyCode, location: e2.location, metaKey: e2.metaKey, repeat: e2.repeat, shiftKey: e2.shiftKey });
  });
}
function on(t, o) {
  let n = async (n2) => {
    if ("object" == typeof n2.data && n2.data.eventName === t) {
      let s = await o(n2.data.data);
      void 0 !== s ? e(t, s) : false;
    }
  };
  return window.addEventListener("message", n, false), () => {
    window.removeEventListener("message", n, false);
  };
}
function send(e2, t, o = false) {
  return (e2.startsWith("self:") ? window.postMessage({ data: t, eventName: e2 }, "*") : window.parent.postMessage({ data: t, eventName: e2 }, "*"), o) ? new Promise((t2) => {
    let o2 = on(`${e2}Response`, (e3) => {
      t2(e3), o2();
    });
  }) : Promise.resolve(void 0);
}
function e(e2, t) {
  window.parent.postMessage({ data: t, eventName: `${e2}Response` }, "*");
}
function init({ RendererElement: e2 }) {
  window.SceneObject = e2;
}
export {
  compose,
  forwardKeydownEvents,
  init,
  on,
  send
};
//# sourceMappingURL=@triplex_bridge_client.js.map
